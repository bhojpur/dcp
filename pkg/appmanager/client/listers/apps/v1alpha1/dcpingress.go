// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	v1alpha1 "github.com/bhojpur/dcp/pkg/appmanager/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DcpIngressLister helps list DcpIngresses.
// All objects returned here must be treated as read-only.
type DcpIngressLister interface {
	// List lists all DcpIngresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DcpIngress, err error)
	// Get retrieves the DcpIngress from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DcpIngress, error)
	IngressListerExpansion
}

// dcpIngressLister implements the DcpIngressLister interface.
type dcpIngressLister struct {
	indexer cache.Indexer
}

// NewDcpIngressLister returns a new DcpIngressLister.
func NewDcpIngressLister(indexer cache.Indexer) DcpIngressLister {
	return &dcpIngressLister{indexer: indexer}
}

// List lists all DcpIngresses in the indexer.
func (s *dcpIngressLister) List(selector labels.Selector) (ret []*v1alpha1.DcpIngress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DcpIngress))
	})
	return ret, err
}

// Get retrieves the DcpIngress from the index for a given name.
func (s *dcpIngressLister) Get(name string) (*v1alpha1.DcpIngress, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dcpingress"), name)
	}
	return obj.(*v1alpha1.DcpIngress), nil
}