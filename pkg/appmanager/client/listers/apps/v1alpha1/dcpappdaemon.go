// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	v1alpha1 "github.com/bhojpur/dcp/pkg/appmanager/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DcpAppDaemonLister helps list DcpAppDaemons.
// All objects returned here must be treated as read-only.
type DcpAppDaemonLister interface {
	// List lists all DcpAppDaemons in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DcpAppDaemon, err error)
	// DcpAppDaemons returns an object that can list and get DcpAppDaemons.
	DcpAppDaemons(namespace string) DcpAppDaemonNamespaceLister
	DcpAppDaemonListerExpansion
}

// dcpAppDaemonLister implements the DcpAppDaemonLister interface.
type dcpAppDaemonLister struct {
	indexer cache.Indexer
}

// NewDcpAppDaemonLister returns a new DcpAppDaemonLister.
func NewDcpAppDaemonLister(indexer cache.Indexer) DcpAppDaemonLister {
	return &dcpAppDaemonLister{indexer: indexer}
}

// List lists all DcpAppDaemons in the indexer.
func (s *dcpAppDaemonLister) List(selector labels.Selector) (ret []*v1alpha1.DcpAppDaemon, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DcpAppDaemon))
	})
	return ret, err
}

// DcpAppDaemons returns an object that can list and get DcpAppDaemons.
func (s *dcpAppDaemonLister) DcpAppDaemons(namespace string) DcpAppDaemonNamespaceLister {
	return dcpAppDaemonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DcpAppDaemonNamespaceLister helps list and get DcpAppDaemons.
// All objects returned here must be treated as read-only.
type DcpAppDaemonNamespaceLister interface {
	// List lists all DcpAppDaemons in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DcpAppDaemon, err error)
	// Get retrieves the DcpAppDaemon from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DcpAppDaemon, error)
	DcpAppDaemonNamespaceListerExpansion
}

// dcpAppDaemonNamespaceLister implements the DcpAppDaemonNamespaceLister
// interface.
type dcpAppDaemonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DcpAppDaemons in the indexer for a given namespace.
func (s dcpAppDaemonNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DcpAppDaemon, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DcpAppDaemon))
	})
	return ret, err
}

// Get retrieves the DcpAppDaemon from the indexer for a given namespace and name.
func (s dcpAppDaemonNamespaceLister) Get(name string) (*v1alpha1.DcpAppDaemon, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dcpappdaemon"), name)
	}
	return obj.(*v1alpha1.DcpAppDaemon), nil
}