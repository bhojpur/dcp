// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6f\x13\x31\x10\xbd\xfb\x57\x58\xbd\x54\x42\x72\x2a\xae\x7b\x84\x03\xf7\x4a\x70\x9f\xb5\x1f\x89\x5b\xaf\xc7\x1a\x8f\xb7\xc0\xaf\x47\x4e\x02\x82\x5d\x52\x92\xb6\x88\xde\x46\xab\x79\x1f\xf3\x66\xc7\x54\xe2\x27\x48\x8d\x9c\x07\x2b\x23\xf9\x0d\x35\xdd\xb1\xc4\x6f\xa4\x91\xf3\x66\xdc\xf1\x5d\x69\xb2\xc9\xd0\x9b\xf9\xad\xb9\x8f\x39\x0c\xf6\x7d\x6a\x55\x21\xb7\x9c\x60\x26\x28\x05\x52\x1a\x8c\xb5\x99\x26\x0c\xf6\x08\x71\x3e\x71\x0b\xce\x73\x56\xe1\x94\x20\x6e\xa2\x4c\x5b\x88\x91\x96\x50\x07\xe3\x2c\x95\xf8\x41\xb8\x95\xda\xc1\xce\x7a\x66\x09\x31\xaf\x84\x8d\xb5\x82\xca\x4d\x3c\x8e\x9d\x09\x54\x51\x8d\xb5\x33\x64\x3c\x7e\xdb\xee\x1b\x9d\xf5\x02\x52\xec\xcb\x56\x42\x2f\x57\x42\x57\x57\x6b\x4a\xcc\xc8\xba\xa0\xfc\x85\xaa\x90\xfa\xdd\xc5\xa4\x99\xc3\xd2\xe6\xf5\x9b\xeb\x0b\xb0\x37\x55\x49\xdb\x82\xe2\xe0\xe5\x2c\x92\x0a\x99\xa3\x5f\x7a\x48\xb1\xea\x9f\xa7\xea\xe5\xc3\xc5\xf4\xe4\x3d\xb7\x53\xe9\x9d\x45\x54\xfa\x2f\x58\x15\x59\x67\x4e\x6d\x3a\xb5\xdb\x9f\xc6\x9f\x66\x17\x39\x14\x8e\x8f\xad\x79\x25\xf4\xb0\xda\xbb\x73\xe6\x99\x37\xf3\x2e\xe6\x10\xf3\xf6\x49\xa7\xc3\x09\xb7\xf8\xdc\x11\x3f\xe6\xfd\x9b\x05\x63\xed\xfa\x6a\xcf\x16\xac\x6d\xbc\x83\xd7\xfd\xb9\x1e\x68\x3e\x56\xc8\xf9\xf8\x43\x63\x2d\xe4\x31\xd8\xfb\x36\xc2\xd5\xaf\x55\x31\xfd\xdf\x1c\x5d\x17\x72\x01\x09\x5b\x52\x7e\xf9\x58\x0f\x33\x0e\x0b\x95\x57\x97\xe5\x0b\x84\x88\xac\xd1\xef\x25\x9c\x80\xc2\x63\x2e\x9f\x13\xf2\x6f\xe9\xe2\x8b\x22\xf7\x49\x1d\x95\xd8\x9f\xa0\x93\x5e\xfe\x55\xe2\xdf\x03\x00\x00\xff\xff\xc5\xdd\xd6\xa9\x35\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x10\x3a\xc8\xcd\xc1\x91\x13\x9f\xa0\xdd\x96\x77\x69\xec\xb6\xc1\x36\xae\x61\x3b\x05\x8a\xc5\x22\xa0\xa9\xb1\xc5\x86\xe2\x70\x49\xca\x89\xb7\x9b\x77\x5f\x50\x92\x65\xd2\x56\xd2\x24\xdb\xd5\x8d\x2d\x0d\xe7\x87\x1f\x67\xbe\x19\x32\x2d\xbe\x80\xb1\x02\x15\x25\xeb\x41\xef\x46\xa8\x8c\x92\x19\x98\xb5\xe0\x70\xc6\x39\x96\xca\xf5\x0a\x70\x2c\x63\x8e\xd1\x1e\x21\x8a\x15\x40\x09\x47\x03\x99\xb2\xcd\xbb\xd5\x8c\x03\x25\x37\xe5\x02\x52\xbb\xb1\x0e\x8a\x5e\x9a\xa6\xbd\xd0\xb4\x59\x30\xde\x67\xa5\xcb\xd1\x88\x3f\x99\x13\xa8\xfa\x8b\x1c\xbf\xe9\xd2\xf4\x15\xb8\xe3\xd6\xf3\xb9\x2c\xad\x03\x33\x45\x09\x91\x5b\xc9\x16\x20\xad\xff\x47\x2a\x3f\x46\x81\x03\xdb\x17\x78\xbc\x40\x74\xd6\x19\xa6\xb5\x50\xab\xda\x51\x9a\xc1\x92\x95\xd2\xd9\x36\xde\x3a\x2a\xba\x0d\xdb\x94\x12\x2c\xed\xa5\x84\x69\xf1\xc1\x60\xa9\x2b\xcb\x29\x49\x92\x1e\x21\x06\x2c\x96\x86\x43\xf3\x0d\x54\xa6\x51\xa8\xca\x58\x4a\x6c\x8d\x4c\xfd\xa2\x31\xab\xff\xb4\x20\xf8\xd7\x35\x98\x45\xa3\x2b\x85\x75\xd5\x9f\x5b\xe6\x78\x7e\xe8\x2f\x13\x96\xe3\x1a\xcc\x26\x04\xe3\x91\x10\xa4\xf8\xa1\x8b\x7f\x8e\xfb\x3b\xa1\x32\xa1\x56\x11\xfc\x4c\x29\x74\x95\x7a\x73\x06\x1d\x76\xe3\x63\x61\xa5\xc3\x52\x67\xcc\x01\x25\x89\x33\x25\x24\x3f\xff\x14\x51\xc2\x14\x96\x55\x7c\x0d\xae\x3f\xda\x70\x8f\x90\xc3\x3c\x7b\xc0\xbc\x2d\x17\xdf\x80\xbb\x2a\x4f\x3a\xcb\xe2\xc5\xc5\xb0\x43\x1d\xd5\x52\xac\x2e\x99\x7e\x49\x89\x6d\x97\x9f\xa3\x81\xa5\x90\x40\xc9\x5f\x15\xb0\x7d\xfa\xea\x94\x7c\xaf\xfe\xfa\x07\x8c\x41\x63\xdb\xd7\x1c\x98\x74\x79\xfb\x6a\x80\x65\x9b\xf6\x6d\x77\x26\xe4\xe8\xfb\xf9\xa7\xab\xd9\x7c\x34\xbd\x1e\x7e\xbe\x3c\xbb\x18\xdf\x1f\x11\xa1\x52\x96\x65\xa6\xcf\x8c\x66\x44\xe8\xd7\xf5\x9f\x9d\x27\x52\x15\x04\x11\xca\x02\x2f\x0d\x04\xdf\x97\x4c\x4a\x97\x1b\x2c\x57\x79\xb7\x95\x76\xed\xfd\x2e\x50\xb4\xce\x92\x63\x70\xfc\xb8\x81\xe2\x78\x8c\x19\x7c\xac\x3e\x87\x4e\x9d\x93\xe4\xf5\x49\xf0\xc1\x80\x44\x96\x91\xc1\x2b\xdb\x1d\x42\x87\x33\x6d\xb0\x00\x97\x43\x69\x09\x7d\x3b\x78\x75\xda\x0a\x96\x68\x6e\x99\xc9\x48\xbf\x8e\xc4\x17\xa6\x5c\xf7\x39\xaa\x65\xbb\x84\x33\x9e\x03\x39\xdd\x45\x20\x11\x75\x2f\x0e\x26\x90\xb1\x6c\xc1\x24\x53\xbc\xc6\xa7\x0e\x41\x14\x1a\x8d\x8b\x37\xcb\x4b\xeb\xb0\x38\xfe\x6f\xdf\x53\x0e\x98\x83\x24\x62\x5a\xdb\x5d\xfd\x0e\x41\x4b\xdc\x14\xf0\x32\xb6\x8e\x2b\x33\xe3\x3a\x65\x5a\x37\x4b\x6a\xc5\xfd\x7a\xad\x0d\x27\x3e\xf7\x86\xe3\x59\xd2\xb3\x1a\xb8\xd7\xfe\x8f\x01\x2d\x05\x67\x96\x92\x41\x8f\x10\x5f\xd2\x0e\x56\x9b\xda\xb0\xdb\x68\xa0\x64\x8a\x52\x0a\xb5\xba\xaa\xc8\xa1\x26\x93\xf0\x0b\x6d\xb0\x2a\xd8\xdd\x95\x62\x6b\x26\x24\x5b\xf8\xe4\xae\xcc\x81\x04\xee\xd0\xd4\x6b\x0a\xcf\x78\x9f\x82\xc0\xbb\x43\x77\x50\x68\xd9\x1a\x0e\xd1\xa9\x0e\x24\xd2\x7f\x68\xf3\xdb\xed\xd5\xb9\x22\xd0\x08\xb7\x39\x97\xcc\xda\x71\x8d\x43\x8d\x63\xca\x6b\x56\x49\xb9\x11\x4e\x70\x26\x93\x46\xc5\x46\xc4\x31\xde\x3b\x94\x0a\x1a\x94\x60\x42\x82\xf5\x4f\x4a\x6e\x60\xe3\x51\x6e\xcc\x9d\x65\x19\x2a\xfb\x59\xc9\x4d\x12\x64\x36\x6a\xaf\x89\x86\x92\x64\x74\x27\xac\xb3\xc9\x81\x01\x85\x19\xa4\x9e\x2e\xf7\x48\x9a\xa3\x72\x06\x65\xaa\x25\x53\xf0\x44\x9b\x84\xc0\x72\x09\xdc\x51\x92\x8c\x71\xc6\x73\xc8\x4a\x09\x4f\x77\x59\x30\x8f\xd0\xcf\xf0\xe5\x3d\xcc\xa2\x84\xf0\xcf\x02\x1c\xdb\x73\x89\x96\x12\x29\x54\x79\xd7\x62\xad\x51\xe2\x6a\x33\xd3\x9e\xfd\xce\x51\xf9\x2c\xf5\xed\x35\x44\xbe\x60\x77\xb3\x1b\xb8\xad\xf3\x6e\xfb\x6c\x35\x7f\xf5\x5b\x8c\x9d\x78\xba\xf2\x45\x11\xac\xbe\xcd\x41\x5d\x29\xcb\x9c\xb0\x4b\x51\x27\xf1\x10\xc7\xe8\xb6\x1b\x09\x96\x56\x59\x78\xb8\x99\x07\xb2\xfc\xf1\x5c\x25\xc4\x1f\x2b\x13\x0a\x4c\xab\x91\x1e\x30\x41\xfd\x88\x82\xad\x80\x92\xa3\xef\xb3\xaf\xb3\xf9\xe8\xf2\x7a\x38\x7a\x7f\x76\xf5\x69\x7e\x3d\x1d\x7d\xb8\x98\xcd\xa7\x5f\xef\x8f\x9a\xe6\x79\x5c\x08\xdf\x47\x20\x4b\x1b\x13\xdb\x5f\x3a\xe8\xbf\xed\x0f\x62\x83\x93\x52\xca\x09\x4a\xc1\x37\x94\x5c\x2c\xc7\xe8\x26\x06\x2c\x54\x1d\xb3\x7e\xa2\xf9\xa6\xc5\x40\x14\xc2\xed\xed\xb1\x80\x02\xcd\x86\x92\xc1\x2f\x27\x97\x22\xa2\xf8\x3f\x4a\xb0\xfb\xab\xb9\x2e\x29\x19\x9c\x9c\x14\x9d\x36\x22\x13\xcc\xac\x2c\x25\xbf\x91\x24\xf5\x5c\x9e\xfc\x8f\x24\x11\xf9\x6e\x7b\x6a\x42\x7e\x6f\x55\xd6\x28\xcb\x02\x2e\x7d\x05\x47\x99\xb2\x45\xd6\xb7\xf2\xb4\x5e\x14\xf8\x2f\xfc\xfa\x09\x73\x39\x8d\xe8\x3d\xda\x0b\xcb\x7c\x4d\x53\xe2\xc7\xa4\x43\xc3\x55\x1f\x48\x9f\x69\xbf\x69\x1f\x3f\x76\xe3\x1b\x4f\xb4\x9d\x36\x79\x26\x68\x1c\x25\x41\x2f\xdc\xb6\x93\x38\x7c\x6d\xd0\x21\x47\x49\xc9\xd5\x70\xf2\x5c\x3b\xa9\xe3\xba\xd3\xd6\xfc\xfc\x11\x5b\x51\x87\xde\x5a\x2b\xc0\x19\xc1\xbb\x23\x0b\xad\x55\xc3\x89\xa7\x6f\x54\x0e\xee\x5c\x98\x41\x4c\x4a\xbc\x9d\x18\xb1\x16\x12\x56\x30\xb2\x9c\xc9\x8a\x92\xa9\x9f\x1e\x6c\x88\x3a\x67\x9a\x2d\x84\x14\x4e\xc0\x5e\x0e\xb2\x2c\x8b\x3f\xa4\x64\x3c\x9a\x5f\xbf\xbb\x18\x0f\xaf\x67\xa3\xe9\x97\x8b\xf3\x51\x24\xce\x0c\xea\x7d\x05\x26\x65\xc7\xc1\x4d\x11\xdd\x7b\x21\xa1\x19\x53\xe3\x63\x94\x62\x0d\x0a\xac\x9d\x18\x5c\x40\x68\x2f\x77\x4e\x7f\x00\x17\xbb\xd0\x75\xbe\xec\xcd\x82\xa4\x49\x07\x4a\xde\x9c\xbc\x39\x89\x3e\x5b\x9e\x83\x07\xf9\xe3\x7c\x3e\x09\x04\x42\x09\x27\x98\x1c\x82\x64\x9b\x19\x70\x54\x99\xa5\xf1\x2c\xa6\xc1\x08\xcc\x5a\xd9\x20\x94\x39\x51\x00\x96\x6e\x27\x0c\x64\xb6\xe4\x1c\xac\x9d\xe7\x06\x6c\x8e\x32\x8b\xa5\x4b\x26\x64\x69\x20\x90\x9e\x46\x13\xad\x78\x36\x14\xf1\x1c\x1c\x20\x31\x78\x33\x78\x31\x12\x8f\x00\xf1\xff\x7f\x19\x87\x4c\xd9\x2d\x03\x0f\xeb\x6b\x54\x23\xa8\x09\xe4\x19\x04\xc6\xb7\x77\x94\x18\xb7\xee\x7e\x52\x41\xe1\xa0\xb0\xfb\x29\x5d\x0d\x05\x5b\x56\xdd\x6b\x63\xf5\x11\x74\x0a\x1b\xc5\x76\xf0\xef\xd4\x3c\x94\x3e\x91\x3b\x9f\xb2\xb5\xf4\x80\x48\xfd\xc4\xe2\x59\x81\xc9\xa6\x06\x1f\xbc\xde\x35\xf7\xc5\x8e\x89\x3c\x68\xd8\x0f\x8e\xe4\x07\x77\xee\xdd\x25\xc5\x0f\x1c\x75\x7e\x26\x9e\x0b\x93\x0e\xb1\xe5\x86\xe9\x87\xee\xde\x4f\x99\xf0\xb7\xb3\x6c\x33\xbb\x06\x96\x9e\x7a\x17\x88\xa7\xf5\x2e\x9f\x8d\x8f\x8b\x09\x0d\xef\x9b\xe3\xd9\xfd\x51\x2f\xe8\x4c\xe9\x5e\xdf\xd1\x61\x43\xd9\x6f\x3f\x69\x47\x73\x79\x40\xa1\xee\x0a\x69\x47\xff\xd0\x71\x9b\x89\x54\xfe\x0e\x00\x00\xff\xff\x47\x72\xf5\xca\x31\x13\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\x69\xcd\xc3\x86\x52\x4e\xb6\x01\x01\x58\xec\xc1\x4d\x9c\x2c\x40\x62\x1b\xb6\xb7\xa1\x28\x0a\x83\xa2\xce\x31\x1b\x8a\x24\x48\xca\xad\x9b\xe5\xbb\x0f\x14\x65\x47\x72\x9c\x7f\xd8\xf6\x36\xbd\x08\x24\xef\xef\xef\x7e\xc7\x23\x33\xe2\x0f\xb4\x4e\x68\x45\x61\x75\x94\xdc\x08\x55\x50\x98\xa2\x5d\x09\x8e\x7d\xce\x75\xa5\x7c\x52\xa2\x67\x05\xf3\x8c\x26\x00\x8a\x95\x48\x41\x6a\xce\x24\x31\xcc\x2f\x89\xb1\x7a\x25\x82\x3e\x5a\xe2\xa2\x1e\x61\x8d\x62\x14\x77\x86\x71\xa4\x70\x53\xe5\x48\xdc\xda\x79\x2c\x13\x42\x48\xd2\xf6\x6c\x73\xc6\x33\x56\xf9\xa5\xb6\xe2\x1b\xf3\x42\xab\x2c\x5f\xea\xcf\xa6\xb2\x99\x42\xdf\xdb\x06\x76\x22\x2b\xe7\xd1\x4e\xb4\xc4\x97\x47\x65\x83\xb4\xad\x24\x3a\x9a\x10\x60\x46\x9c\x5b\x5d\x19\x47\xe1\x63\x9a\x7e\x4a\x00\x2c\x3a\x5d\x59\x8e\xf5\x8e\xd2\x05\xba\xf4\x2d\xa4\x26\xc4\xe6\x3c\x2a\xbf\xd2\xb2\x2a\x91\x4b\x26\xca\xfa\x84\x6b\xb5\x10\xd7\x25\x33\xae\x56\x5f\xa1\xcd\x6b\xd5\x6b\xf4\xe1\x58\x0a\x57\xff\xbf\x30\xcf\x97\xe9\xa7\xe7\x5d\xa2\x2a\x8c\x16\xca\xef\x75\x1b\x37\x75\xb1\xe3\xeb\xc7\x17\x19\x5e\x61\xb0\xda\x51\xe4\x16\x99\xc7\xda\xe8\xfe\xf8\x9c\xd7\x96\x5d\x63\x1b\xff\x87\x96\x1b\x21\x2e\x99\x73\xf8\x42\x18\xfe\x79\xc9\xdf\x0b\x55\x08\x75\xfd\xf2\xca\xe7\x42\x15\x49\x28\xff\x04\x17\x41\x78\x93\xe8\x73\xde\x13\x80\x87\x7c\x7b\x09\xcb\x5c\x95\x7f\x46\xee\x6b\xa2\xed\x6d\xa5\xff\xaa\x81\x98\x31\xee\x1e\xb3\x53\x34\x52\xaf\x4b\x7c\x45\xef\x3e\xee\xca\x19\xe4\xb4\x26\x80\x91\x82\x33\x47\xe1\x28\x01\x70\x28\x91\x7b\x6d\xc3\x09\x40\x19\x8a\x7c\xc9\x72\x94\x2e\x6e\x04\xac\xcd\x13\xbe\x3c\x96\x46\x32\x8f\x8d\x7a\x2b\xc8\xf0\xc9\x8e\xa5\xe7\x6c\x01\x6c\x42\x0c\x9f\xb1\x42\x5b\xe1\xd7\x27\x81\x9b\xc3\x3a\xe3\x34\x66\x42\x42\x6f\x13\x6e\x85\x17\x9c\xc9\xb4\x91\x77\x9d\x02\x0d\x5f\x57\x9d\xf0\x79\x2d\xd1\xd6\x14\x6a\x45\x0c\x40\xe0\x06\xd7\x14\xd2\x93\xc6\x5f\xbf\x28\xb4\x72\x23\x25\xd7\x69\x4b\x0a\x40\x9b\xa0\xad\x2d\x85\x74\xf0\x55\x38\xef\xd2\x3d\x46\xea\xc8\x03\xc3\xb2\x50\x19\xab\xd0\xa3\xcb\x84\xee\x71\xad\xbc\xd5\x92\x18\xc9\x14\xbe\xc2\x2e\x00\x2e\x16\xc8\x3d\x85\x74\xa8\xa7\x7c\x89\x45\x25\xf1\x35\x8e\x4b\x16\xfa\xe2\xdf\xf2\x18\xd2\x60\x42\xa1\xdd\x22\x48\x9e\x23\x6b\xfc\x44\xc9\xae\x91\xc2\xc1\xed\xf4\xc3\x74\x36\xb8\x9a\x9f\x0e\xce\xfa\xbf\x5f\xce\xe6\x93\xc1\xf9\xc5\x74\x36\xf9\x70\x77\xd0\x74\x75\x6f\xbf\x21\xba\x3a\xcc\x0e\xb3\x9f\x8e\xba\x06\xc7\x95\x94\x63\x2d\x05\x5f\x53\xb8\x58\x0c\xb5\x1f\x5b\x74\xb8\x2d\x78\x88\xb7\x2c\x99\x2a\xee\xcb\x4d\x9e\x0b\x94\x80\xf3\xcc\xfa\xd6\x9a\x90\x38\x47\x5a\x5b\x3d\xf4\xbc\x17\x77\x9b\x5f\xf6\xd9\x69\xb5\x95\x88\x13\xe1\x2a\x70\xcf\xb5\x7d\x47\xa8\xa2\x06\x89\x42\x2d\xe4\xcb\x20\x3f\x66\x7e\x49\x3b\x0e\xb6\x12\xa8\x56\x0f\x8d\x8d\x47\xa7\xf3\x61\xff\x6a\x30\x1d\xf7\x4f\x06\x2d\x63\x2b\x26\x2b\x3c\xb3\xba\xa4\x9d\xda\x2e\x04\xca\xa2\xb9\x64\x1f\xec\x47\xdf\x9b\x1e\xcf\xb6\xd7\x4c\xd2\xce\xea\x15\x09\xc5\xfd\x2b\x66\xba\xde\x1e\x10\xa6\xc1\x77\xf7\xaa\xdc\x33\xe0\xee\x6f\xce\x69\x3c\xac\x2f\x8f\x27\xef\xce\x30\x4d\x94\xd2\xbe\xdd\xf8\xed\xa9\xb8\xd3\x2f\xc2\x91\x02\x17\xac\x92\x9e\xd4\xc7\x14\x52\x6f\x2b\x4c\x93\x36\x19\xa1\x1d\x52\xcb\x55\x44\xa0\x99\x7e\x57\xba\x40\x0a\x7f\x32\xe1\xcf\xb4\x3d\x13\xd6\xf9\x13\xad\x5c\x55\xa2\x4d\x6c\x7c\xa4\x6c\xa8\x7b\x8a\x12\x3d\xd6\xf9\x37\xd3\x6c\x03\x5c\xb2\xf3\xea\x7b\x72\x48\x6c\x69\xfa\xc8\x7c\xd8\x28\xb6\x18\x4b\xe1\x2f\x52\x23\x72\xdb\x54\xa8\xbe\x47\x02\x0f\xae\x98\x49\xe9\xc7\x66\xf7\x76\x5b\xbf\xfa\x3c\xa5\xe9\xa6\x7f\xc7\xfd\xd9\x6f\xf3\xb3\xd1\x64\x3e\x1c\x0d\xe7\x97\x17\xd3\xd9\xe0\x74\x3e\x1c\x9d\x0e\xa6\xe9\xdb\x7b\x9d\x10\x9d\x4b\xe9\xc7\xf4\xe0\x76\xa3\x77\x39\x3a\xe9\x5f\xce\xa7\xb3\xd1\xa4\x7f\x3e\xa8\xad\xdc\x1d\xd4\xaf\x93\xf0\xdd\x35\xff\xb8\xbe\xab\x87\x98\x0f\x8f\x81\x26\xd8\xef\xbf\xeb\xe5\x42\xf5\xdc\xb2\x5e\x7d\x59\x0a\x89\x70\x8d\x5e\x1b\xef\x20\x2d\xa9\xa3\x86\xa6\xa0\x4d\x6c\xe2\x42\xdf\xdf\x06\xcc\x21\xbc\xd1\xc6\x83\x50\x1d\x46\x9a\x1f\x3a\x4b\x96\x3b\x2d\x2b\x5f\xe3\xf0\xeb\x9b\xd1\x78\xd6\x9f\x9c\x77\x04\xde\xbd\xeb\x2c\x5d\x57\xdd\x89\x6f\x78\xa1\xde\xaf\x3d\xba\x97\x68\x97\x5d\xed\x95\x96\x81\x39\xcf\x69\xa2\x63\xbc\xc9\x4f\xc5\x9e\x2b\x6f\x0a\x61\x81\x94\x70\x78\x7c\x7c\x0c\xc4\xc0\x9b\xdb\x76\x22\x11\x54\xbe\x2c\x75\x01\xc7\x87\x47\xbb\xa7\xbd\x2c\xab\xa7\x3d\xb3\x85\xfe\xa2\xfe\x87\xfa\x49\xa8\x6d\x09\xc4\x2e\xf6\x00\xbc\x44\x69\xd0\x8e\x75\x91\xad\x59\x29\xb7\x28\xee\x74\x71\xd8\x8a\x8d\x3e\xd6\xc5\xde\x77\x55\xec\xed\x68\x8d\x98\x46\xa8\xfd\x78\x7a\x7c\x10\xef\x28\xc1\xab\x86\x6f\x29\xac\xd5\x16\x0b\x22\x45\x6e\x99\x5d\x93\xbc\x72\xeb\x5c\x7f\xa5\x47\xd9\xcf\xbf\x64\x47\x7f\x07\x00\x00\xff\xff\x43\xb3\x7c\xe3\x84\x0e\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x31\x4f\xc4\x30\x0c\x46\xf7\xfc\x0a\x2b\x33\x3d\xc4\x9a\x95\x81\x9d\x81\x05\xdd\xe0\x36\x9f\x5a\x43\x9a\x54\xb6\xd3\x13\xfc\x7a\x74\x15\x3a\xb1\x21\x98\x3c\x3c\xbf\x67\xf9\x5d\x6a\x4e\xf4\x58\xba\x39\xf4\xb9\x15\x04\xde\xe4\x05\x6a\xd2\x6a\x22\x1d\x79\x3a\x71\xf7\xa5\xa9\x7c\xb2\x4b\xab\xa7\x71\x69\x6f\x5b\xd7\x53\x85\xdf\xef\x0f\x61\x85\x73\x66\xe7\x14\x88\x2a\xaf\x48\x64\x1f\xe6\x58\x13\xcf\xb3\x62\x66\x47\x1e\x56\xb8\xca\x64\x83\x82\x33\x34\x10\x15\x1e\x51\xec\xaa\xd0\x6f\x27\x6e\x99\xc1\xdb\xb0\x0b\x2e\x89\xa2\x6b\x47\xfc\xb3\x8c\x2c\xfe\x6f\x99\xf3\x2a\xf5\x66\x6b\x2f\xb0\x14\x06\xe2\x4d\x9e\xb4\xf5\xcd\x12\xbd\xc6\xef\x37\x7f\x46\xe2\x39\x10\x29\xac\x75\x9d\x70\x2c\x6d\x2d\x5b\xbc\xa3\x58\x5b\x86\x1d\x78\x87\x8e\x07\x9a\xe1\x57\x52\xc4\x8e\x79\x61\x9f\x96\x78\xfe\x0a\x00\x00\xff\xff\x32\xa2\x1f\xed\xa1\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x31\x4e\x03\x31\x10\x45\x7b\x9f\xc2\x17\xf0\x22\x5a\x77\x40\x41\x1f\x24\xfa\x59\xef\x27\x99\x64\x77\xc6\x9a\x19\xaf\x04\xa7\x47\x11\x11\x0d\x20\xda\x2f\xfd\xf7\x5e\x29\x25\x51\xe7\x57\x98\xb3\x4a\xcd\x36\x53\x9b\x68\xc4\x49\x8d\x3f\x28\x58\x65\x9a\x4f\x7a\xee\xc3\x26\x41\xdc\xed\xf7\xe9\xc2\xb2\xd4\xfc\xb4\x0e\x0f\xd8\x41\x57\x3c\xb2\x2c\x2c\xc7\xb4\x21\x68\xa1\xa0\x9a\x72\x16\xda\x50\xf3\x86\x30\x6e\x5e\x1c\xb6\xc3\xaa\xbf\x7b\x60\xab\x57\x7a\x59\xb0\xe2\x48\xa1\x96\x4c\x57\x1c\xf0\x76\x7d\x51\xe7\x67\xd3\xd1\xff\xcb\x48\x39\xff\xa8\xf8\x96\xfe\x6e\xf1\x31\x9f\xd1\xc2\x6b\x2a\xb7\xef\x0b\x6c\xe7\x86\x87\xd6\x74\x48\xfc\xd1\x7c\x9b\xbd\x53\x43\xcd\x97\x31\xa3\x7c\xf1\x3f\x03\x00\x00\xff\xff\xf3\x74\x7c\x85\x38\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbb\x4e\x03\x31\x10\x45\x7b\x7f\x85\x7f\x60\x16\xd1\xba\x83\x86\x3e\x48\xf4\xb3\xde\x0b\x99\x24\x1e\x5b\xe3\xf1\x0a\xf8\x7a\xb4\x28\x3c\x9a\x55\xfa\xab\x73\xcf\x21\xa2\xc0\x4d\x5e\x60\x5d\xaa\xa6\x68\x33\xe7\x89\x87\x1f\xab\xc9\x27\xbb\x54\x9d\xe6\x63\x3d\xb5\x61\x93\xc2\xef\xd6\xfb\x70\x16\x5d\x52\x3c\xd4\x0b\x1e\x45\x17\xd1\xb7\x50\xe0\xbc\xb0\x73\x0a\x31\x2a\x17\xa4\x58\xe0\x26\xb9\x53\x87\xad\x30\xda\x78\x64\xe0\x05\x76\x9d\xf4\xc6\x19\x29\x9e\xc7\x0c\xea\x1f\xdd\x51\x82\xd5\x0b\x0e\x78\xdd\x20\xdc\xe4\xc9\xea\x68\xb7\x74\x42\x8c\x7f\x36\xbf\xe7\x78\x77\xe8\x56\x43\xdc\xe4\x9f\x01\xd4\x25\x7f\x33\x7e\x5c\xfa\x98\x4f\xc8\xde\x53\xa0\x2b\xe8\x19\xb6\x4a\xc6\x43\xce\x75\xa8\xef\xf4\xec\x36\x7c\x05\x00\x00\xff\xff\x25\x57\x5d\xcc\x4d\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x4e\xec\x30\x0c\x85\xf7\x79\x0a\xbf\x40\x7a\xa7\xdb\xec\xee\x12\x09\xa4\x91\x8a\x66\x9f\x66\x0e\x83\xa9\xf2\x23\xdb\xa9\xd4\xb7\x47\x85\xe9\x00\xbb\x28\xe7\x7c\x9f\x6d\xef\xbd\x8b\x8d\x2f\x10\xe5\x5a\x02\xc5\xc6\x82\x1b\xab\x49\x34\xae\x65\x98\xdf\xeb\x47\xeb\x32\x14\xd8\xbf\x75\x74\x0b\x97\x6b\xa0\xff\xe7\xa7\x09\xb2\x72\x82\xcb\xb0\x78\x8d\x16\x83\x23\x2a\x31\x23\xd0\x3a\xce\xb0\x38\x0e\x19\x26\x9c\xf4\xb7\xc1\x69\x43\xda\x9b\xfa\x4d\xef\xcf\x03\xbb\xd7\xfd\x1e\x41\x1e\x81\xb6\x98\x10\x68\xe9\x33\xbc\x6e\x6a\xc8\x8e\xe8\x26\xb5\xb7\x07\xf2\x67\x02\xd1\x7a\x9c\x72\x5f\xc4\x11\x71\x51\xa4\x2e\x98\x16\x6e\xaf\xcf\xd3\x05\xc2\x6f\x5b\x20\x93\x8e\xc3\x76\x16\xae\xc2\xb6\xbd\x70\xe1\xdc\x73\xa0\xf1\x74\xfa\x91\x1d\xe9\xd7\xf7\x67\x00\x00\x00\xff\xff\xae\x78\x3b\xbb\x33\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x6f\x1b\x37\x0c\x7e\xf7\x5f\x41\x78\xe8\xdb\x2e\x76\xba\x76\x03\x04\xe4\x21\x48\xdc\x36\x40\x93\x19\xb1\x3b\xa0\x4f\x85\xa2\xa3\x63\x2d\x92\xa8\x91\x3c\x37\xb7\xa2\xff\xfb\x20\x5f\x7a\xb9\x4b\x93\xa2\xc3\xd6\x7b\x3a\xf0\xe3\x8f\x8f\x1f\x25\xaa\xaa\xaa\x89\xcd\xfe\x0f\x64\xf1\x94\x0c\xec\x0e\x27\x37\x3e\xd5\x06\x56\xc8\x3b\xef\xf0\xd8\x39\x6a\x92\x4e\x22\xaa\xad\xad\x5a\x33\x01\x48\x36\xa2\x81\x88\xca\xde\x49\x25\xc8\x3b\xe4\x3b\xb3\x64\xeb\xd0\xc0\x4d\x73\x85\x95\xb4\xa2\x18\x27\x0f\x2b\xd8\x9c\x65\xd6\x97\x39\xc5\x1c\xa8\x8d\xf8\x9f\x4a\x00\x04\x7b\x85\x41\x4a\x24\x40\xed\x72\x65\x73\xfe\x2a\x5c\x32\xba\xe2\x21\x18\xd0\x29\x71\xe7\x1d\xad\xba\xed\xdb\x41\xf8\xd3\x09\x00\x14\x63\x0e\x56\xf1\x2e\x74\x40\xb8\x7c\x4f\x90\x2e\x5f\x18\x15\xf8\x56\x09\x80\x2f\x3c\xcb\x97\xd9\x13\x7b\x6d\x4f\x82\x15\xb9\xd8\xe7\x9f\x76\x4d\x57\x89\x6a\xac\x1c\x7b\xf5\xce\x86\xe9\x9d\xbf\x8c\xa6\x76\xf1\x34\x21\xa5\x80\x6c\xd5\x53\x1a\xb0\xaa\xe0\x06\x5b\x03\xd3\x93\xbb\xac\xc7\x75\x4d\x49\x7e\x4f\xa1\x9d\xf6\x3e\x00\x94\x4b\x24\xb1\x81\xe9\xe2\xd6\x8b\xca\xf4\xab\x04\x7b\x6e\x4c\x01\x0f\xca\x98\x38\xa1\xa2\x1c\x78\x9a\x39\x4a\xca\x14\xaa\x1c\x6c\xc2\xef\xcc\x09\x80\x9b\x0d\x3a\x35\x30\xbd\xa0\x95\xdb\x62\xdd\x04\xfc\xfe\x92\xd1\x8a\x22\xff\x1f\xb5\x76\x14\x9a\x88\xbd\x5c\x3f\x41\x2c\x1a\x83\x4f\xa0\x31\x83\x10\x7c\x44\x70\x36\x81\xd8\x0d\x86\x16\x1a\x41\xd8\x30\xc5\x4a\x1c\x97\x33\x06\x3e\xda\x6b\x14\xb0\xa9\x9e\x11\x03\xa3\xad\x2b\x4a\xa1\x85\x22\x8a\xf5\x09\x59\x26\x5f\x5a\xea\x4e\x92\xc6\x5c\xd5\x9e\x7b\x76\x18\xb3\xb6\xa7\x9e\x0d\x7c\xfa\x7c\x67\xbc\x8f\x35\x0f\x82\x1f\x9d\x3a\x74\x24\x0c\x3c\xfb\xb4\x7a\xbf\x5a\x2f\xce\x3f\x9c\x2e\x5e\x1d\xbf\x7b\xbb\xfe\x70\xb9\x78\x7d\xb6\x5a\x5f\xbe\xff\xfc\xec\x6a\x4b\x7f\xe6\x86\x67\xd1\x33\x13\x63\x5d\x8d\x33\x99\xdd\xfc\xe0\xe5\xc1\xf3\x3e\xa1\xe5\xeb\xd1\x09\xaa\x2a\x87\xac\x85\xf7\xd1\x4c\x63\x1e\x21\x82\xae\x61\xac\x32\xb1\x1e\xbd\x78\xf1\xe2\x97\x11\x58\xc6\x16\x50\xab\xcc\xb8\x41\x2e\x85\x6d\x5d\x33\x8a\x54\xda\x66\x94\xa3\xb3\xa4\xc8\xc9\x86\xb3\xe5\xcf\x8b\xdb\xfe\xf7\x0d\x89\x96\x86\x1f\x4d\xd5\x08\x76\xd7\x44\xd4\x6a\x23\xfb\xc2\x23\xc7\xae\xb5\x8a\x51\x28\x34\xe5\x32\x1c\x1d\xbe\x94\xde\xa3\x98\x1b\x76\x38\xe8\xaf\x18\xff\x6a\x50\x74\x64\x03\x70\xb9\x31\x70\x38\x9f\xc7\x91\x35\x62\x24\x6e\x0d\xfc\x36\x3f\xf7\x3d\x50\x48\x8c\x14\xeb\xe6\xb5\x55\xcd\x32\x88\xee\x27\xbb\x24\x56\x03\x23\xb9\xca\x5e\x20\x25\x47\xc1\xc0\xfa\x64\x39\x20\x6c\x6b\x9f\x50\x64\xc9\x74\x85\x43\x86\x25\xfb\x6b\xd4\x31\xe9\x6c\x75\x6b\x60\x56\xa2\xda\xbf\xc7\xc8\xbe\xe6\x43\x4a\x00\xe2\xb6\x58\xc8\xbe\x59\xaf\x97\xab\x01\xe2\x93\x57\x6f\xc3\x29\x06\xdb\xae\xd0\x51\xaa\xc5\xc0\x7c\xc8\x17\xd9\x53\xdd\x43\xcf\x07\x90\xfa\x88\xd4\x68\x8f\x1d\x0e\x30\x69\x9c\x43\x91\xf5\x96\x51\xb6\x14\xea\x31\xba\xb1\x3e\x34\x8c\x03\xf4\x5e\xa2\xe0\x77\xf8\xaf\x95\x28\x41\x3f\x40\x88\x5f\xbf\xa1\xc4\xe1\xfc\x87\x4b\xb1\xbf\x75\xe5\x0d\xa1\xa4\x78\xab\xe3\xc3\x6c\xeb\xb2\xde\x2f\x89\xf4\x95\x0f\xd8\x3d\x2d\x06\x94\x1b\x1c\xba\x35\xe9\x58\x2e\x28\x15\xb7\xc7\xc1\x77\x82\xbc\xbf\x00\xc3\x76\x6c\x08\xf4\x71\xc9\x7e\xe7\x03\x5e\xe3\x42\x9c\x0d\xfb\x17\xc7\xc0\xc6\x06\xb9\xcf\xd1\x2d\xd6\xf3\xb2\x4d\x1f\xb9\x18\x0f\xb7\x20\x74\x7b\x77\xd9\x8d\x4c\x63\xfe\x27\x00\x00\xff\xff\x87\x1f\xaa\x4e\xc3\x08\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xbd\x6a\xec\x30\x10\x85\x7b\x3d\xc5\xe0\x5e\xf7\x12\xb2\x95\xda\xd4\x81\x85\x84\xf4\xb3\xf2\x21\x11\x2b\x5b\xc3\xcc\xd8\x90\xb7\x0f\x1e\xa7\x09\x6c\x27\x9d\x39\x3f\x5f\xce\x39\xb1\xb4\x0f\xa8\xb5\xb1\x16\xda\x9f\xd2\xbd\xad\x73\xa1\x37\xe8\xde\x2a\xd2\x02\xe7\x99\x9d\x4b\x22\x5a\x79\x41\xa1\x05\xae\xad\x5a\x36\xe8\x0e\xfd\x95\x4d\xb8\xa2\xd0\x7d\xbb\x21\xdb\xb7\x39\x96\x44\xd4\xf9\x86\x6e\x47\x92\xe2\xa2\x2b\x1c\xf6\xaf\x8d\xff\x67\xd3\xf4\xfa\xa7\x6a\x7a\x60\xac\x7d\x33\x87\x86\xa3\x1d\x0b\x93\xeb\x86\x29\x99\xa0\x1e\xc5\x86\x8e\xea\x43\xcf\x91\xb9\x4a\x66\x91\x07\x8c\x32\xd4\x83\x24\xc7\xb3\xd0\xe5\xf2\x1c\x91\x93\xe4\xcb\x5d\x2c\xfe\xa2\xc3\x47\x1d\xbd\xd0\xfb\xcb\x35\x14\x67\xfd\x84\x5f\x23\x15\xbe\x9f\x00\x00\x00\xff\xff\xa6\x80\x7c\x53\x34\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x4e\x03\x31\x10\x84\x7b\x3f\xc5\x2a\xbd\x13\xd1\xba\x03\x0a\xfa\x20\xd1\xef\xf9\x86\xc4\xc9\x9d\x6d\xed\xae\x0f\xc1\xd3\xa3\xdc\x1d\x3f\x02\x09\x28\xa8\x3c\xb6\xf7\xdb\xd1\x8c\xf7\xde\x71\x4d\x0f\x10\x4d\x25\x07\x92\x8e\xe3\x96\x9b\x1d\x8b\xa4\x17\xb6\x54\xf2\xb6\x3b\x96\x53\x6d\xb2\xcd\xb0\xdd\x74\xe5\xce\x29\xf7\x81\x6e\x87\xa6\x06\xd9\x97\x01\x6e\x84\x71\xcf\xc6\xc1\x11\x65\x1e\x11\x48\x9f\xd5\x30\x86\x11\x26\x29\xaa\x57\xc8\x04\x71\xd2\x06\x68\x70\x9e\xb8\xa6\x3b\x29\xad\xea\x85\xf0\xb4\xd9\x38\x22\x81\x96\x26\x11\xeb\x5b\x2d\xbd\xce\x22\x97\x1e\x9f\xd4\x4e\x8d\x6d\xbd\xf3\x08\xad\x1c\xe7\xef\x09\xd2\xad\xe8\x01\x36\x9f\x43\xd2\x45\x3c\xb1\xc5\xa3\xfb\x87\xa4\x37\x29\xf7\x29\x1f\xfe\x1e\xb8\x0c\xd8\xe3\xf1\x32\xf6\x16\xf9\x37\x5f\x47\xf4\xbd\xe0\x9f\x5d\xb4\x75\x27\x44\x9b\x9b\x5d\xd8\x7b\xc8\x94\x22\xae\x63\x2c\x2d\xdb\x3b\xfe\x85\xa3\x8f\x06\x03\x9d\x5b\x07\xbf\xec\x7f\x0d\x00\x00\xff\xff\xea\x77\x63\xcd\x13\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x4f\xfb\x30\x0c\xc5\xef\xf9\x14\xd1\xee\xd9\x5f\xff\x6b\x8f\x70\xe0\x3e\x09\xee\x69\x62\x3a\x6f\x69\x1c\xd9\xce\x26\xf8\xf4\xa8\xa3\x1a\x63\xb4\x40\x05\xdc\x12\xcb\x7e\x3f\x3d\xfb\xf9\x82\x0f\xc0\x82\x94\x1b\xcb\xad\x0f\x6b\x5f\x75\x4b\x8c\xcf\x5e\x91\xf2\xba\xdd\xd2\xae\x54\x5e\x67\xd0\x7f\x87\xff\x66\x8f\x39\x36\xf6\x36\x55\x51\xe0\x0d\x25\xb8\xc1\x1c\x31\x77\xa6\x07\xf5\xd1\xab\x6f\x8c\xb5\xd9\xf7\xd0\xd8\x7d\x6d\xc1\xf9\x82\x02\x7c\x00\x76\xc3\x37\x81\x3a\x1f\x7b\xcc\x86\x29\xc1\x06\x1e\x87\x6e\x5f\xf0\x8e\xa9\x96\xaf\xf0\xc6\xda\x0f\xf4\x33\x4c\x9e\x44\xa1\x6f\xce\x90\x82\x23\x48\x6a\xbb\x83\xa0\xd2\x18\xb7\x9c\x74\x2f\xc0\x33\x7e\x8c\x71\xce\x99\x1f\x2e\x6f\x62\x6b\xa3\x91\x18\x8a\x0b\x94\x95\x29\x25\x60\xc3\x35\xc1\x3b\x0b\x32\x4c\x38\xbb\x5a\x19\x6b\x19\x84\x2a\x07\x18\x6b\x99\x22\x88\xb1\xf6\x00\xdc\x8e\xa5\x0e\xf4\x9b\xb3\xbe\x07\x29\x3e\x5c\x0b\x24\x14\x3d\x3d\x8e\x5e\xc3\x76\x42\x2b\x83\x1e\x89\xf7\x98\xbb\x4b\xd3\x53\x84\xd7\xc6\x42\x09\x03\x2e\xc6\x4c\x08\x42\x8e\x85\x30\xab\x9c\x7e\x85\xe2\x9c\x66\x07\x97\xda\xbf\x71\xbe\xf9\xec\xcf\x5c\xf1\x6f\x42\x7f\x45\x79\x4b\xfc\xe0\x76\x01\xe8\x2a\xf5\x9f\x52\x5e\x02\x00\x00\xff\xff\x29\xca\x6f\x6f\x36\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6f\xd3\x4c\x10\xc6\xef\xfe\x14\x23\x4b\x39\xae\x9d\x54\xaf\x5e\x55\xbe\x85\xd4\x40\x05\x14\x94\xa4\xa0\x9e\xa2\xf5\x7a\x12\x2f\x59\xef\x5a\x33\xe3\x40\x28\xfd\xee\x68\xe3\xa4\x7f\xa4\x4a\x45\x08\x8e\x1e\xcf\xfc\xe6\x99\xe7\x59\xa5\x54\xa2\x3b\xfb\x19\x89\x6d\xf0\x05\x34\xe8\xda\xac\x6a\xc2\xd7\xae\xa7\xcc\xa3\xe4\xbb\x49\xb2\xb5\xbe\x2e\xe0\x2d\xba\x76\xd6\x68\x92\xa4\x45\xd1\xb5\x16\x5d\x24\x00\x5e\xb7\x58\x80\x90\xc6\xb5\xdd\x2a\x43\xf5\xb1\xc6\x9d\x36\x58\xc0\xb6\xaf\x50\xf1\x9e\x05\xdb\x84\x3b\x34\x71\xc4\x44\x48\x01\x8d\x48\xc7\x45\x9e\x8f\x6e\xdf\x5d\xbf\x2a\xe7\x57\xe5\xb2\x5c\xac\xa6\x9f\x2e\xef\x46\x39\x8b\x16\x6b\xf2\x43\x23\xe7\x8f\xe0\x6a\x32\xce\x26\xff\x65\x93\xf1\x38\x93\xcd\x8f\xe4\xaf\x8a\xff\x77\xc2\x9f\x8a\x06\x60\x94\x88\x03\xd8\xb8\x50\x69\x97\x0d\x6b\x2e\x70\xad\x7b\x27\x73\xdc\x58\x16\xda\x17\x90\x8e\x6e\x17\x37\x8b\x65\xf9\x61\x75\x51\xbe\x9e\x5e\xbf\x5f\xae\xe6\xe5\x9b\xcb\xc5\x72\x7e\xb3\x9a\x4f\xbf\xdc\x8d\xd2\x04\x60\xa7\x5d\x8f\x3c\x0b\x5e\xd0\x4b\x01\x3f\xd5\x81\x4b\x95\x36\xc3\x06\x00\xf4\xba\x72\x58\xc7\x33\x7b\x3c\xd4\xba\x40\xc2\xa7\xdf\xdf\xb0\x62\x34\x3d\xe1\xa9\x00\x20\x8e\x1f\x3e\x9e\x07\xd4\x53\xef\x43\xbc\x35\xf8\xfb\xde\x8e\x42\x8b\xd2\x60\xcf\x99\x0d\x79\x5c\x52\x40\x7a\x3e\x3e\x3f\x4b\x9f\x6d\x60\x43\xba\xc3\x02\xd2\x88\x1d\x5a\x3a\x0a\x3b\x5b\x23\xdd\x23\x63\x08\xe4\x51\x90\x2f\xfd\x86\x90\x1f\xe9\xea\xfa\xca\x59\x6e\xb0\x5e\x20\xed\xac\xc1\x17\x14\x93\x0d\x64\x65\x3f\x73\x9a\xf9\xea\x90\x7a\x3a\xb8\xae\x8c\xeb\x59\x90\x94\x21\x2b\xd6\x68\x37\x48\xb1\xad\xde\xdc\x33\x87\x67\x92\x1e\x1f\x56\xde\x5a\xa2\x40\x58\x2b\x67\x2b\xd2\xb4\x57\xc7\x9c\x4f\x77\x8a\xde\x14\x90\x9e\x65\xff\x67\x93\xa1\x24\xc1\x21\x3d\x36\x4b\xc1\x16\x63\xc0\xb3\xe3\xce\x69\x5d\x07\xcf\x1f\xbd\xdb\x9f\x18\xa1\x8b\x13\x81\x0a\x48\xcb\xef\x96\x85\xd3\x27\x83\x3e\xd4\xa8\x28\x38\xcc\x1e\x2c\x8a\xa6\x9a\xe0\x85\x82\x53\x9d\xd3\x1e\x5f\x60\x01\xe0\x7a\x8d\x26\xa6\x74\x15\x16\xa6\xc1\xba\x77\xf8\x7b\x6b\x5a\x1d\x2d\xfb\x23\xfe\xaf\x00\x00\x00\xff\xff\x88\xda\xfd\xda\x70\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
