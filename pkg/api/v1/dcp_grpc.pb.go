// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DcpServiceClient is the client API for DcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DcpServiceClient interface {
	// StartLocalCloud starts a Cloud on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the dcp/config.yaml
	//   3. all bytes constituting the Cloud YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalCloud(ctx context.Context, opts ...grpc.CallOption) (DcpService_StartLocalCloudClient, error)
	// StartFromPreviousCloud starts a new Cloud based on a previous one.
	// If the previous Cloud does not have the can-replay condition set this call will result in an error.
	StartFromPreviousCloud(ctx context.Context, in *StartFromPreviousCloudRequest, opts ...grpc.CallOption) (*StartCloudResponse, error)
	// StartCloudRequest starts a new Cloud based on its specification.
	StartCloud(ctx context.Context, in *StartCloudRequest, opts ...grpc.CallOption) (*StartCloudResponse, error)
	// Searches for Cloud(s) known to this instance
	ListClouds(ctx context.Context, in *ListCloudsRequest, opts ...grpc.CallOption) (*ListCloudsResponse, error)
	// Subscribe listens to new Cloud(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DcpService_SubscribeClient, error)
	// GetCloud retrieves details of a single Cloud
	GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error)
	// Listen listens to Cloud updates and log output of a running Cloud
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DcpService_ListenClient, error)
	// StopCloud stops a currently running Cloud
	StopCloud(ctx context.Context, in *StopCloudRequest, opts ...grpc.CallOption) (*StopCloudResponse, error)
}

type dcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDcpServiceClient(cc grpc.ClientConnInterface) DcpServiceClient {
	return &dcpServiceClient{cc}
}

func (c *dcpServiceClient) StartLocalCloud(ctx context.Context, opts ...grpc.CallOption) (DcpService_StartLocalCloudClient, error) {
	stream, err := c.cc.NewStream(ctx, &DcpService_ServiceDesc.Streams[0], "/v1.DcpService/StartLocalCloud", opts...)
	if err != nil {
		return nil, err
	}
	x := &dcpServiceStartLocalCloudClient{stream}
	return x, nil
}

type DcpService_StartLocalCloudClient interface {
	Send(*StartLocalCloudRequest) error
	CloseAndRecv() (*StartCloudResponse, error)
	grpc.ClientStream
}

type dcpServiceStartLocalCloudClient struct {
	grpc.ClientStream
}

func (x *dcpServiceStartLocalCloudClient) Send(m *StartLocalCloudRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dcpServiceStartLocalCloudClient) CloseAndRecv() (*StartCloudResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartCloudResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dcpServiceClient) StartFromPreviousCloud(ctx context.Context, in *StartFromPreviousCloudRequest, opts ...grpc.CallOption) (*StartCloudResponse, error) {
	out := new(StartCloudResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpService/StartFromPreviousCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcpServiceClient) StartCloud(ctx context.Context, in *StartCloudRequest, opts ...grpc.CallOption) (*StartCloudResponse, error) {
	out := new(StartCloudResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpService/StartCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcpServiceClient) ListClouds(ctx context.Context, in *ListCloudsRequest, opts ...grpc.CallOption) (*ListCloudsResponse, error) {
	out := new(ListCloudsResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpService/ListClouds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcpServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DcpService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DcpService_ServiceDesc.Streams[1], "/v1.DcpService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dcpServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DcpService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type dcpServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *dcpServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dcpServiceClient) GetCloud(ctx context.Context, in *GetCloudRequest, opts ...grpc.CallOption) (*GetCloudResponse, error) {
	out := new(GetCloudResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpService/GetCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcpServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DcpService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &DcpService_ServiceDesc.Streams[2], "/v1.DcpService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dcpServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DcpService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type dcpServiceListenClient struct {
	grpc.ClientStream
}

func (x *dcpServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dcpServiceClient) StopCloud(ctx context.Context, in *StopCloudRequest, opts ...grpc.CallOption) (*StopCloudResponse, error) {
	out := new(StopCloudResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpService/StopCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DcpServiceServer is the server API for DcpService service.
// All implementations must embed UnimplementedDcpServiceServer
// for forward compatibility
type DcpServiceServer interface {
	// StartLocalCloud starts a Cloud on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the dcp/config.yaml
	//   3. all bytes constituting the Cloud YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalCloud(DcpService_StartLocalCloudServer) error
	// StartFromPreviousCloud starts a new Cloud based on a previous one.
	// If the previous Cloud does not have the can-replay condition set this call will result in an error.
	StartFromPreviousCloud(context.Context, *StartFromPreviousCloudRequest) (*StartCloudResponse, error)
	// StartCloudRequest starts a new Cloud based on its specification.
	StartCloud(context.Context, *StartCloudRequest) (*StartCloudResponse, error)
	// Searches for Cloud(s) known to this instance
	ListClouds(context.Context, *ListCloudsRequest) (*ListCloudsResponse, error)
	// Subscribe listens to new Cloud(s) updates
	Subscribe(*SubscribeRequest, DcpService_SubscribeServer) error
	// GetCloud retrieves details of a single Cloud
	GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error)
	// Listen listens to Cloud updates and log output of a running Cloud
	Listen(*ListenRequest, DcpService_ListenServer) error
	// StopCloud stops a currently running Cloud
	StopCloud(context.Context, *StopCloudRequest) (*StopCloudResponse, error)
	mustEmbedUnimplementedDcpServiceServer()
}

// UnimplementedDcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDcpServiceServer struct {
}

func (UnimplementedDcpServiceServer) StartLocalCloud(DcpService_StartLocalCloudServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalCloud not implemented")
}
func (UnimplementedDcpServiceServer) StartFromPreviousCloud(context.Context, *StartFromPreviousCloudRequest) (*StartCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousCloud not implemented")
}
func (UnimplementedDcpServiceServer) StartCloud(context.Context, *StartCloudRequest) (*StartCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCloud not implemented")
}
func (UnimplementedDcpServiceServer) ListClouds(context.Context, *ListCloudsRequest) (*ListCloudsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClouds not implemented")
}
func (UnimplementedDcpServiceServer) Subscribe(*SubscribeRequest, DcpService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDcpServiceServer) GetCloud(context.Context, *GetCloudRequest) (*GetCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloud not implemented")
}
func (UnimplementedDcpServiceServer) Listen(*ListenRequest, DcpService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedDcpServiceServer) StopCloud(context.Context, *StopCloudRequest) (*StopCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCloud not implemented")
}
func (UnimplementedDcpServiceServer) mustEmbedUnimplementedDcpServiceServer() {}

// UnsafeDcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DcpServiceServer will
// result in compilation errors.
type UnsafeDcpServiceServer interface {
	mustEmbedUnimplementedDcpServiceServer()
}

func RegisterDcpServiceServer(s grpc.ServiceRegistrar, srv DcpServiceServer) {
	s.RegisterService(&DcpService_ServiceDesc, srv)
}

func _DcpService_StartLocalCloud_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DcpServiceServer).StartLocalCloud(&dcpServiceStartLocalCloudServer{stream})
}

type DcpService_StartLocalCloudServer interface {
	SendAndClose(*StartCloudResponse) error
	Recv() (*StartLocalCloudRequest, error)
	grpc.ServerStream
}

type dcpServiceStartLocalCloudServer struct {
	grpc.ServerStream
}

func (x *dcpServiceStartLocalCloudServer) SendAndClose(m *StartCloudResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dcpServiceStartLocalCloudServer) Recv() (*StartLocalCloudRequest, error) {
	m := new(StartLocalCloudRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DcpService_StartFromPreviousCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpServiceServer).StartFromPreviousCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpService/StartFromPreviousCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpServiceServer).StartFromPreviousCloud(ctx, req.(*StartFromPreviousCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcpService_StartCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpServiceServer).StartCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpService/StartCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpServiceServer).StartCloud(ctx, req.(*StartCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcpService_ListClouds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpServiceServer).ListClouds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpService/ListClouds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpServiceServer).ListClouds(ctx, req.(*ListCloudsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcpService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DcpServiceServer).Subscribe(m, &dcpServiceSubscribeServer{stream})
}

type DcpService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type dcpServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *dcpServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DcpService_GetCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpServiceServer).GetCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpService/GetCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpServiceServer).GetCloud(ctx, req.(*GetCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcpService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DcpServiceServer).Listen(m, &dcpServiceListenServer{stream})
}

type DcpService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type dcpServiceListenServer struct {
	grpc.ServerStream
}

func (x *dcpServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DcpService_StopCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpServiceServer).StopCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpService/StopCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpServiceServer).StopCloud(ctx, req.(*StopCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DcpService_ServiceDesc is the grpc.ServiceDesc for DcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DcpService",
	HandlerType: (*DcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousCloud",
			Handler:    _DcpService_StartFromPreviousCloud_Handler,
		},
		{
			MethodName: "StartCloud",
			Handler:    _DcpService_StartCloud_Handler,
		},
		{
			MethodName: "ListClouds",
			Handler:    _DcpService_ListClouds_Handler,
		},
		{
			MethodName: "GetCloud",
			Handler:    _DcpService_GetCloud_Handler,
		},
		{
			MethodName: "StopCloud",
			Handler:    _DcpService_StopCloud_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalCloud",
			Handler:       _DcpService_StartLocalCloud_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DcpService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _DcpService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcp.proto",
}
