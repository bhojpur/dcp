// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DcpUIClient is the client API for DcpUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DcpUIClient interface {
	// ListCloudSpecs returns a list of Cloud(s) that can be started through the UI.
	ListCloudSpecs(ctx context.Context, in *ListCloudSpecsRequest, opts ...grpc.CallOption) (DcpUI_ListCloudSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type dcpUIClient struct {
	cc grpc.ClientConnInterface
}

func NewDcpUIClient(cc grpc.ClientConnInterface) DcpUIClient {
	return &dcpUIClient{cc}
}

func (c *dcpUIClient) ListCloudSpecs(ctx context.Context, in *ListCloudSpecsRequest, opts ...grpc.CallOption) (DcpUI_ListCloudSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DcpUI_ServiceDesc.Streams[0], "/v1.DcpUI/ListCloudSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &dcpUIListCloudSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DcpUI_ListCloudSpecsClient interface {
	Recv() (*ListCloudSpecsResponse, error)
	grpc.ClientStream
}

type dcpUIListCloudSpecsClient struct {
	grpc.ClientStream
}

func (x *dcpUIListCloudSpecsClient) Recv() (*ListCloudSpecsResponse, error) {
	m := new(ListCloudSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dcpUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.DcpUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DcpUIServer is the server API for DcpUI service.
// All implementations must embed UnimplementedDcpUIServer
// for forward compatibility
type DcpUIServer interface {
	// ListCloudSpecs returns a list of Cloud(s) that can be started through the UI.
	ListCloudSpecs(*ListCloudSpecsRequest, DcpUI_ListCloudSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedDcpUIServer()
}

// UnimplementedDcpUIServer must be embedded to have forward compatible implementations.
type UnimplementedDcpUIServer struct {
}

func (UnimplementedDcpUIServer) ListCloudSpecs(*ListCloudSpecsRequest, DcpUI_ListCloudSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCloudSpecs not implemented")
}
func (UnimplementedDcpUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedDcpUIServer) mustEmbedUnimplementedDcpUIServer() {}

// UnsafeDcpUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DcpUIServer will
// result in compilation errors.
type UnsafeDcpUIServer interface {
	mustEmbedUnimplementedDcpUIServer()
}

func RegisterDcpUIServer(s grpc.ServiceRegistrar, srv DcpUIServer) {
	s.RegisterService(&DcpUI_ServiceDesc, srv)
}

func _DcpUI_ListCloudSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCloudSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DcpUIServer).ListCloudSpecs(m, &dcpUIListCloudSpecsServer{stream})
}

type DcpUI_ListCloudSpecsServer interface {
	Send(*ListCloudSpecsResponse) error
	grpc.ServerStream
}

type dcpUIListCloudSpecsServer struct {
	grpc.ServerStream
}

func (x *dcpUIListCloudSpecsServer) Send(m *ListCloudSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DcpUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcpUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DcpUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcpUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DcpUI_ServiceDesc is the grpc.ServiceDesc for DcpUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DcpUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DcpUI",
	HandlerType: (*DcpUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _DcpUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCloudSpecs",
			Handler:       _DcpUI_ListCloudSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcp-ui.proto",
}
