# -*- mode: ruby -*-
# vi: set ft=ruby :
#

ENV['TEST_INSTALL_SH'] ||= '../../../install.sh'

Vagrant.configure("2") do |config|
  config.vagrant.plugins = {
    'vagrant-dcp' => {:version => '~> 0.1.3'},
  }
  config.vm.box = 'opensuse/Leap-15.3.x86_64'
  config.vm.boot_timeout = ENV['TEST_VM_BOOT_TIMEOUT'] || 600 # seconds
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.define 'install-opensuse-leap', primary: true do |test|
    test.vm.hostname = 'smoke'
    test.vm.provision 'dcp-upload', type: 'file', run: 'always', source: ENV['TEST_INSTALL_SH'], destination: 'install.sh'
    # /sbin/apparmor_parser is needed by the 1.21 kubelet if the value of /sys/module/apparmor/parameters/enabled is Y
    test.vm.provision 'dcp-prepare', type: 'shell', run: 'once', inline: 'zypper install -y apparmor-parser'
    test.vm.provision 'dcp-install', type: 'dcp', run: 'once' do |dcp|
      dcp.installer_url = 'file:///home/vagrant/install.sh'
      dcp.args = %w[server]
      dcp.env = ENV.select{|k,v| k.start_with?('DCP_') || k.start_with?('INSTALL_DCP_')}.merge({
        :INSTALL_DCP_NAME => 'server',
        :INSTALL_DCP_SKIP_SELINUX_RPM => 'true',
      })
      dcp.config = {
        :token => 'vagrant',
      }
      dcp.config_mode = '0644' # side-step
    end
    test.vm.provision "dcp-wait-for-node", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eu -o pipefail
        echo 'Waiting for node to be ready ...'
        time timeout 300 bash -c 'while ! (kubectl wait --for condition=ready node/$(hostnamectl --static) 2>/dev/null); do sleep 5; done'
        kubectl get node,all -A -o wide
      SHELL
    end
    test.vm.provision "dcp-wait-for-coredns", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eu -o pipefail
        time timeout 300 bash -c 'while ! (kubectl --namespace kube-system rollout status --timeout 10s deploy/coredns 2>/dev/null); do sleep 5; done'
      SHELL
    end
    test.vm.provision "dcp-wait-for-local-storage", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eu -o pipefail
        time timeout 300 bash -c 'while ! (kubectl --namespace kube-system rollout status --timeout 10s deploy/local-path-provisioner 2>/dev/null); do sleep 5; done'
      SHELL
    end
    test.vm.provision "dcp-wait-for-metrics-server", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eu -o pipefail
        time timeout 300 bash -c 'while ! (kubectl --namespace kube-system rollout status --timeout 10s deploy/metrics-server 2>/dev/null); do sleep 5; done'
      SHELL
    end
    test.vm.provision "dcp-wait-for-traefik", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eu -o pipefail
        time timeout 300 bash -c 'while ! (kubectl --namespace kube-system rollout status --timeout 10s deploy/traefik 2>/dev/null); do sleep 5; done'
      SHELL
    end
    test.vm.provision "dcp-status", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        kubectl get node,all -A -o wide
      SHELL
    end
    test.vm.provision "dcp-procps", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
      sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
      sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        ps auxZ | grep -E 'dcp|kube|container' | grep -v grep
      SHELL
    end
  end

  %w[libvirt virtualbox vmware_desktop].each do |p|
    config.vm.provider p do |v|
      v.cpus = ENV['TEST_VM_CPUS'] || 2
      v.memory = ENV['TEST_VM_MEMORY'] || 2048
    end
  end
  config.vm.provider :virtualbox do |v,o|
    v.gui = false
    v.check_guest_additions = false
  end
end