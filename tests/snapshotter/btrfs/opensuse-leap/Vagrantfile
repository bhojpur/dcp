# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagrant box for testing Bhojpur DCP with the btrfs snapshotter. Usage:
# VAGRANT_EXPERIMENTAL=disks vagrant up

Vagrant.configure("2") do |config|
    config.vagrant.plugins = {
      'vagrant-dcp' => {:version => '~> 0.1.3'},
    }
    config.vm.box = "opensuse/Leap-15.3.x86_64"
    config.vm.boot_timeout = ENV['TEST_VM_BOOT_TIMEOUT'] || 600 # seconds
    config.vm.synced_folder '../../../../dist/artifacts', '/vagrant', type: 'rsync', disabled: false,
      rsync__exclude: ENV['RSYNC_EXCLUDE'] || '*.tar.*'
  
    config.vm.define 'snapshotter-btrfs', primary: true do |test|
      test.vm.hostname = 'smoke'
      test.vm.provision 'dcp-prepare', type: 'shell', run: 'once', privileged: true do |sh|
        sh.inline = <<~EOF
          #!/usr/bin/env bash
          set -eu -o pipefail
          zypper install -y btrfsprogs hostname
          mkdir -p /var/lib/bhojpur/dcp /etc/bhojpur/dcp /usr/local/bin
          if ! mountpoint -q /var/lib/bhojpur/dcp; then
              : ${BTRFS_DEV:=#{ENV['BTRFS_DEV']}}
              for disk in sd[b-d] vd[b-d] xd[b-d]; do
                  if [ -n "${BTRFS_DEV}" ]; then break; fi
                  : ${BTRFS_DEV:=$(test -b /dev/$disk && echo $disk)}
              done
              btrfs filesystem show /dev/${BTRFS_DEV:?unable to determine automatically, please specify} 2>/dev/null || mkfs -t btrfs /dev/${BTRFS_DEV}
              mountpoint -q /mnt || mount -t btrfs /dev/${BTRFS_DEV} /mnt
              btrfs subvolume show /mnt/@dcp 2>/dev/null || btrfs subvolume create /mnt/@dcp
              umount /mnt
              mount -t btrfs -o subvol=@dcp /dev/${BTRFS_DEV} /var/lib/bhojpur/dcp
          fi
          # Install DCP binary
          install -m 755 /vagrant/dcp /usr/local/bin
          if [ -e /vagrant/*.tar ]; then
              mkdir -vp /var/lib/bhojpur/dcp/agent/images
              for tar in /vagrant/*.tar; do
                  cp -vf $tar /var/lib/bhojpur/dcp/agent/images/
              done
          fi
        EOF
      end
      test.vm.provision 'dcp-install', type: 'dcp', run: 'once' do |dcp|
        dcp.args = %w[server --snapshotter=btrfs]
        dcp.env = %w[INSTALL_DCP_NAME=server INSTALL_DCP_SKIP_DOWNLOAD=true DCP_TOKEN=vagrant]
        dcp.config = {
          'disable' => %w[local-storage metrics-server servicelb traefik],
          'disable-helm-controller' => true,
          'disable-network-policy' => true,
          'write-kubeconfig-mode' => '0644',
        }
        dcp.config_mode = '0644' # side-step
      end
      test.vm.provision "dcp-wait-for-node", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
        sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
        sh.inline = <<~SHELL
          #!/usr/bin/env bash
          set -eu -o pipefail
          echo 'Waiting for node to be ready ...'
          time timeout 300 bash -c 'while ! (kubectl wait --for condition=ready node/$(hostnamectl --static) 2>/dev/null); do sleep 5; done'
          kubectl get node,all -A -o wide
        SHELL
      end
      test.vm.provision "dcp-wait-for-coredns", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
        sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
        sh.inline = <<~SHELL
          #!/usr/bin/env bash
          set -eu -o pipefail
          time timeout 300 bash -c 'while ! (kubectl --namespace kube-system rollout status --timeout 10s deploy/coredns 2>/dev/null); do sleep 5; done'
        SHELL
      end
      test.vm.provision "dcp-status", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
        sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
        sh.inline = <<~SHELL
          #!/usr/bin/env bash
          set -eux -o pipefail
          kubectl get node,all -A -o wide
        SHELL
      end
      test.vm.provision "dcp-snapshots", type: "shell", run: ENV['CI'] == 'true' ? 'never' : 'once' do |sh|
        sh.env = { :PATH => "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin" }
        sh.inline = <<~SHELL
          #!/usr/bin/env bash
          set -eux -o pipefail
          btrfs subvolume list /var/lib/bhojpur/dcp/agent/containerd/io.containerd.snapshotter.v1.btrfs
        SHELL
      end
    end
  
    %w[libvirt virtualbox].each do |p|
      config.vm.provider p do |v|
        v.cpus = ENV['TEST_VM_CPUS'] || 2
        v.memory = ENV['TEST_VM_MEMORY'] || 2048
      end
    end
  
    config.vm.provider :libvirt do |v,o|
      v.storage :file, :size => '8G'
    end
  
    config.vm.provider :virtualbox do |v,o|
      v.gui = false
      v.check_guest_additions = false
      o.vm.disk :disk, name: "btrfs", size: "8GB" # Requires VAGRANT_EXPERIMENTAL="disks"
    end
  end